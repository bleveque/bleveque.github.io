{"version":3,"sources":["StringRenderer.js","metadataParser.js","constants.js","components/StringRenderArea.js","asciiArt.js","pageDataGenerators/home.js","pageDataGenerators/projects.js","ImageConverter.js","components/TV.js","pageDataGenerators/tv.js","pageDataGenerators/work.js","pageDataGenerators/about.js","pageDataGenerators/index.js","pageDataGenerators/nav.js","animationHelper.js","components/HomePage.js","index.js"],"names":["interpolate","a","b","t","StringRenderer","width","height","data","this","content","textMetadata","breakWidth","interval","initialContent","finalContent","length","Array","join","interpolatedArr","maxLength","Math","max","i","String","fromCharCode","round","charCodeAt","chars","len","inputData","relativeY","type","renderText","renderTextrect","renderLine","sort","chunk1","chunk2","start","fillEmptyEntriesAndAddLineBreaks","str","generateRenderData","x","y","out","chunkMetadata","text","isYRelative","parseWidth","parseHeight","initX","chunkStart","Infinity","chunkEnd","maxY","maxWidth","nextNewlineIdx","indexOf","nextSpaceIdx","nextBreakIdx","min","nextBreakX","outIdx","getIdxWithBreaks","props","push","end","dx","dy","floor","isFinite","startHeight","endHeight","startWidth","endWidth","dim","parseFloat","ceil","elements","lastEnd","key","substring","href","contentOffsets","navWidth","topBarHeight","StringRenderArea","singleCharRef","React","createRef","doubleCharRef","singleCharWidth","singleCharHeight","windowCharWidth","windowCharHeight","verticalCharPadding","resizeHandler","stringRenderer","autoResize","resize","bind","window","addEventListener","charHeight","current","getBoundingClientRect","console","log","onSetCharDims","removeEventListener","fixedWidthPx","innerWidth","fixedHeightPx","innerHeight","setDimensions","forceUpdate","newData","finalTextMetadata","intermediateContent","interpolateContent","interpolationParameter","metadataParser","interpolateToNewData","setData","render","className","Fragment","ref","childElementDataGenerator","Component","DANCING","left","top","CHAR_GRADIENT","ImageConverter","characterWidth","characterHeight","charWidth","w","h","p","outRgba","inRgba","kernel","kernelWidth","kernelHalfWidth","kernelHalfHeight","rsum","gsum","bsum","xIdx","offset","r","g","kernelIdx","outOffset","fn","idx","forEachPixel","imageData","intensity","grayscaleImage","grayscale","horizConvolved","convolveKernel","vertConvolved","finalIntensity","sqrt","pow","invert","val","linearThresh","outCharacterWidth","aspectRatio","outCharacterHeight","rgb","block","imageCharacterWidth","imageCharacterHeight","pxOffset","pyOffset","ctr","py","roundPy","px","roundPx","pixelIndex","reduce","acc","getCharForVal","TV","state","paused","imageConverter","refreshRate","videoRef","canvasRef","setCharDims","setInterval","clearInterval","getCharWidthTvUnits","getCharHeightTvUnits","video","canvas","context","getContext","videoHeight","videoWidth","drawImage","getImageData","edgeModeOn","edgeDetection","putImageData","asciiImageArray","convert","tvWidthPx","tvHeightPx","setCharDimensions","setState","on","pause","play","getElementsFromVideo","getBlankScreenElements","onClick","controls","src","contentLeft","contentTop","CHANNELS","title","url","tvLeft","tvTop","tvChannelUpLeftOffset","tvOnLeftOffset","flooredLeftOffset","wrappedExplanation","home","stringRenderData","random","projects","tv","tvOn","setTvOn","tvChannel","setTvChannel","tvEdgeModeOn","setTvEdgeModeOn","tvDimMultiplier","setTvDimMultiplier","fontSize","tvNowShowingText","stringRenderChildElementDataGenerator","tvFontSize","style","position","lineHeight","work","about","email","getNavProps","pageName","onNavClick","animationHelper","animationLength","intervalLength","onTick","onDone","timeInInterval","HomePage","pathname","useLocation","pageDataGenerators","hasOwnProperty","useState","setPageName","newPageData","setNewPageData","setInterpolationParameter","pageSpecificState","navRenderData","navDataGenerator","switchPage","newPageName","newStringRenderData","ReactDOM","path","document","getElementById"],"mappings":"2SAEMA,EAAc,SAACC,EAAGC,EAAGC,GACzB,OAAOF,GAAK,EAAIE,GAAKD,EAAIC,GA8NZC,E,WAzNb,WAAYC,EAAOC,EAAQC,GAAO,oBAChCC,KAAKC,QAAU,GACfD,KAAKE,aAAe,GACpBF,KAAKD,KAAOA,GAAQ,GACpBC,KAAKH,MAAQA,EACbG,KAAKG,WAAaH,KAAKH,MAAQ,EAC/BG,KAAKF,OAASA,EACdE,KAAKI,SAAW,K,oDAGVL,GACNC,KAAKD,KAAOA,I,mCAIZ,OAAOC,KAAKC,U,iCAGHA,GACTD,KAAKC,QAAUA,I,wCAIf,OAAOD,KAAKE,e,yCAGKG,EAAgBC,EAAcX,GAC3CU,EAAeE,OAASD,EAAaC,OACvCD,GAAiB,IAAIE,MAAMH,EAAeE,OAASD,EAAaC,OAAS,GAAIE,KAAK,KACzEH,EAAaC,OAASF,EAAeE,SAC9CF,GAAmB,IAAIG,MAAMF,EAAaC,OAASF,EAAeE,OAAS,GAAIE,KAAK,MAKtF,IAHA,IAAIC,EAAkB,IAAIF,MAAMH,EAAeE,QAEzCI,EAAYC,KAAKC,IAAIR,EAAeE,OAAQD,EAAaC,QACtDO,EAAI,EAAGA,EAAIH,EAAWG,IACzBA,EAAId,KAAKG,aAAeH,KAAKG,WAAa,EAC5CO,EAAgBI,GAAK,KAErBJ,EAAgBI,GAAKC,OAAOC,aAAaJ,KAAKK,MAAMzB,EAAYa,EAAeS,GAAGI,aAAcZ,EAAaQ,GAAGI,aAAcvB,KAIlI,OAAOe,EAAgBD,KAAK,M,uDAGGU,GAC/B,IAAK,IAAIL,EAAI,EAAGM,EAAMD,EAAMZ,OAAQO,EAAIM,EAAKN,IAC3CK,EAAML,GAAKK,EAAML,IAAM,IACnBA,EAAId,KAAKG,aAAeH,KAAKG,WAAa,IAAGgB,EAAML,GAAK,Q,yCAI7CO,EAAWnB,GAI5B,IAHA,IAAIiB,EAAQ,GACRG,EAAY,EAEPR,EAAI,EAAGA,EAAIO,EAAUd,OAAQO,IACpC,GAAKO,EAAUP,GAAf,CADyC,MAGpBO,EAAUP,GAAxBS,EAHkC,EAGlCA,KAAMxB,EAH4B,EAG5BA,KAEA,SAATwB,EACFD,EAAYtB,KAAKwB,WAAWL,EAAOjB,EAAcH,EAAMuB,GACrC,aAATC,EACTD,EAAYtB,KAAKyB,eAAeN,EAAOjB,EAAcH,EAAMuB,GACzC,SAATC,GACTvB,KAAK0B,WAAWP,EAAOpB,GAQ3B,OAJAG,EAAayB,MAAK,SAACC,EAAQC,GAAT,OAAoBD,EAAOE,MAAQD,EAAOC,SAE5D9B,KAAK+B,iCAAiCZ,GAE/B,CAAEa,IAAKb,EAAMV,KAAK,IAAKP,kB,+BAI9BF,KAAKE,aAAaK,OAAS,EADpB,MAGqBP,KAAKiC,mBAAmBjC,KAAKD,KAAMC,KAAKE,cAA9D8B,EAHC,EAGDA,IAHC,EAGI9B,aAIX,OAFAF,KAAKC,QAAU+B,EAER,CAAEA,IAAKhC,KAAKC,QAASC,aAAcF,KAAKE,gB,uCAGhCgC,EAAGC,GAClB,OAAOA,EAAInC,KAAKG,WAAa+B,I,iCAMpBE,EAAKC,EAAehB,EAAWC,GAAY,IAC9CgB,EAAqCjB,EAArCiB,KAD6C,cACRjB,EAA/BS,MADuC,GAC/BI,EAD+B,KAC5BC,EAD4B,KACxBI,EAAgBlB,EAAhBkB,YAC3BL,EAAIlC,KAAKwC,WAAWN,GACpBC,EAAInC,KAAKyC,YAAYL,EAAKD,GACtBI,IAAaJ,GAAKb,GAClBY,EAAI,IAAGA,GAAKlC,KAAKH,OAOrB,IALA,IAAM6C,EAAQR,EACVS,EAAaC,IACbC,GAAYD,IACZE,EAAO,EAEFhC,EAAI,EAAGA,EAAIwB,EAAK/B,OAAQO,IAAKoB,IACpC,GAAgB,OAAZI,EAAKxB,IAMT,KAAIoB,EAAI,OACJA,GAAKlC,KAAKH,QAAUwB,EAAU0B,UAAlC,CAEA,GAAI1B,EAAU0B,SACZ,GAAIb,GAAKlC,KAAKH,OAASqC,EAAIQ,EAAQ,EAAIrB,EAAU0B,SAC/Cb,EAAIQ,EACJP,SACK,GAAgB,MAAZG,EAAKxB,GAAY,CAC1B,IAAMkC,EAAiBV,EAAKW,QAAQ,KAAMnC,EAAI,GACxCoC,EAAeZ,EAAKW,QAAQ,IAAKnC,EAAI,GACrCqC,GAAoC,IAApBH,IAA2C,IAAlBE,EAAuBtC,KAAKC,IAAIqC,EAAcF,GAAkBpC,KAAKwC,IAAIF,EAAcF,GAChIK,EAAcF,EAAerC,EAAKoB,EACpCiB,EAAe,IAAME,EAAarD,KAAKH,OAASwD,EAAaX,EAAQ,EAAIrB,EAAU0B,YACrFb,EAAIQ,EACJP,IACArB,KAIN,IAAMwC,EAAStD,KAAKuD,iBAAiBrB,EAAGC,GAExCC,EAAIkB,GAAUhB,EAAKxB,GACnB6B,EAAa/B,KAAKwC,IAAIT,EAAYW,GAClCT,EAAWjC,KAAKC,IAAIgC,EAAUS,GAC9BR,EAAOlC,KAAKC,IAAIiC,EAAMX,SA7BpBD,EAAIQ,EAAQ,EACZP,IA+BJ,OADIE,GAAiBhB,EAAUmC,OAAOnB,EAAcoB,KAAK,CAAE3B,MAAOa,EAAYe,IAAKb,EAAUxB,cACtFyB,I,qCAIMV,EAAKC,EAAehB,EAAWC,GAAY,IAClDgB,EAA4CjB,EAA5CiB,KADiD,cACLjB,EAAtCS,MAD2C,GACnCI,EADmC,KAChCC,EADgC,KAC5BtC,EAAuBwB,EAAvBxB,MAAO0C,EAAgBlB,EAAhBkB,YAClCL,EAAIlC,KAAKwC,WAAWN,GACpBC,EAAInC,KAAKyC,YAAYL,EAAKD,GACtBI,IAAaJ,GAAKb,GAClBY,EAAI,IAAGA,GAAKlC,KAAKH,OAMrB,IAJA,IAAI8C,GAAcC,IACdC,GAAYD,IACZE,EAAO,EAEFhC,EAAI,EAAGA,EAAIwB,EAAK/B,OAAQO,IAC/B,KAAIoB,EAAKpB,EAAIjB,EAAS,GAAKqC,EAAKpB,EAAIjB,GAAUG,KAAKH,OAAnD,CACA,IAAM8D,EAAK7C,EAAIjB,EACT+D,EAAKhD,KAAKiD,MAAM/C,EAAIjB,GACpByD,EAAStD,KAAKuD,iBAAiBrB,EAAIyB,EAAIxB,EAAIyB,GACjDxB,EAAIkB,GAAUhB,EAAKxB,GACnBgC,EAAOlC,KAAKC,IAAIiC,EAAMX,EAAIyB,GAEtBN,EAAST,EAAW,IAClBiB,SAASjB,IAAaR,GAAiBhB,EAAUmC,OACnDnB,EAAcoB,KAAK,CAAE3B,MAAOa,EAAYe,IAAKb,EAAUxB,cAEzDsB,EAAaW,GAEfT,EAAWS,EAKb,OAFIQ,SAASjB,IAAaR,GAAiBhB,EAAUmC,OAAOnB,EAAcoB,KAAK,CAAE3B,MAAOa,EAAYe,IAAKb,EAAUxB,cAE5GyB,I,iCAGEV,EAAKf,GAAY,IAClBS,EAAeT,EAAfS,MAAO4B,EAAQrC,EAARqC,IACf,GAAI5B,EAAM,KAAO4B,EAAI,IAAM5B,EAAM,KAAO4B,EAAI,GAE1CtB,EADepC,KAAKuD,iBAAiBzB,EAAM,GAAIA,EAAM,KACvC,YACT,GAAIA,EAAM,KAAO4B,EAAI,GAG1B,IAFA,IAAMK,EAAc/D,KAAKyC,YAAYL,EAAKN,EAAM,IAC1CkC,EAAYhE,KAAKyC,YAAYL,EAAKsB,EAAI,IACnC5C,EAAIiD,EAAajD,GAAKkD,EAAWlD,IAAK,CAE7CsB,EADepC,KAAKuD,iBAAiBvD,KAAKwC,WAAWV,EAAM,IAAKhB,IAClD,SAEX,GAAIgB,EAAM,KAAO4B,EAAI,GAG1B,IAFA,IAAMO,EAAajE,KAAKwC,WAAWV,EAAM,IACnCoC,EAAWlE,KAAKwC,WAAWkB,EAAI,IAC5B5C,EAAImD,EAAYnD,GAAKoD,EAAUpD,IAAK,CAE3CsB,EADepC,KAAKuD,iBAAiBzC,EAAGd,KAAKyC,YAAYL,EAAKN,EAAM,MACtD,Y,iCAKTqC,GACT,MAAsB,kBAARA,EAAmBA,EAAMvD,KAAKiD,MAAMO,WAAWD,GAAOnE,KAAKH,MAAQ,O,kCAGvEsB,EAAOgD,GACjB,GAAmB,kBAARA,EAAkB,OAAOA,EACpC,IAAMrE,EAASc,KAAKC,IAAIb,KAAKF,OAAQc,KAAKyD,KAAKlD,EAAMZ,OAASP,KAAKH,QACnE,OAAOuE,WAAWD,GAAOrE,EAAS,M,oCAGtBD,EAAOC,GACnBE,KAAKH,MAAQA,EACbG,KAAKG,WAAaH,KAAKH,MAAQ,EAC/BG,KAAKF,OAASA,M,KCtNH,WAACkC,EAAK9B,GAInB,IAHA,IAAIoE,EAAW,GAEXC,GAAW,EACNzD,EAAI,EAAGA,EAAIZ,EAAaK,OAAQO,IAAK,CAAC,IAAD,EACZZ,EAAaY,GAAvCgB,EADsC,EACtCA,MAAO4B,EAD+B,EAC/BA,IAAKrC,EAD0B,EAC1BA,WAClBS,EAAQlB,KAAKC,IAAIiB,EAAOyC,EAAU,IACtBA,EAAU,GAAGD,EAASb,KAAK,0BAAMe,IAAG,oBAAe1D,IAAMkB,EAAIyC,UAAUF,EAAU,EAAGzC,KAC5FT,GAAaA,EAAUmC,OAASnC,EAAUmC,MAAMkB,KAClDJ,EAASb,KAAK,qCAAGe,IAAG,YAAO1D,IAASO,EAAUmC,OAAQxB,EAAIyC,UAAU3C,EAAO4B,EAAM,KAEjFY,EAASb,KAAK,wCAAMe,IAAG,eAAU1D,IAASO,EAAUmC,OAAQxB,EAAIyC,UAAU3C,EAAO4B,EAAM,KAEzFa,EAAUb,EAGZ,OADIa,EAAUvC,EAAIzB,QAAQ+D,EAASb,KAAK,0BAAMe,IAAI,aAAaxC,EAAIyC,UAAUF,EAAU,EAAGvC,EAAIzB,UACvF+D,GCrBHK,EAAiB,CAAEC,EAAcC,GCgGxBC,E,YArFb,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDuB,cAAgBC,IAAMC,YAC3B,EAAKC,cAAgBF,IAAMC,YAE3B,EAAKE,iBAAmB,EACxB,EAAKC,kBAAoB,EACzB,EAAKC,gBAAkB,GACvB,EAAKC,iBAAmB,GACxB,EAAKC,oBAAsB,EAC3B,EAAKC,cAAgB,KACrB,EAAKvF,QAAU,GACf,EAAKwF,eAAiB,IAAI7F,EAAe,EAAKyF,gBAAiB,EAAKC,iBAAkB9B,EAAMzD,MAb3E,E,iFAmBbC,KAAKwD,MAAMkC,aACb1F,KAAKwF,cAAgBxF,KAAK2F,OAAOC,KAAK5F,MACtC6F,OAAOC,iBAAiB,SAAU9F,KAAKwF,gBAGzC,IAAMO,EAAa/F,KAAK+E,cAAciB,QAAQC,wBAAwBnG,OAEhEyF,EAAsB,EAAIQ,EADP/F,KAAKkF,cAAcc,QAAQC,wBAAwBnG,OAG5EE,KAAKmF,gBAAkBnF,KAAK+E,cAAciB,QAAQC,wBAAwBpG,MAC1EG,KAAKoF,iBAAmBW,EAAaR,EACrCvF,KAAKuF,oBAAsBA,EAE3BW,QAAQC,IAAI,sBAAuBnG,KAAKmF,gBAAiBnF,KAAKoF,iBAAkBpF,KAAKuF,qBAErFvF,KAAK2F,SACD3F,KAAKwD,MAAM4C,eAAepG,KAAKwD,MAAM4C,cAAcpG,KAAKmF,gBAAiBnF,KAAKoF,iBAAkBpF,KAAKuF,uB,6CAKrGvF,KAAKwF,gBACPK,OAAOQ,oBAAoB,SAAUrG,KAAKwF,eAC1CxF,KAAKwF,cAAgB,Q,+BAMvBxF,KAAKqF,gBAAkBzE,KAAKiD,OAAO7D,KAAKwD,MAAM8C,cAtDzC1F,KAAKwC,IAAIyC,OAAOU,WDHF,OCyD+DvG,KAAKmF,iBACvFnF,KAAKsF,iBAAmB1E,KAAKiD,QAAQ7D,KAAKwD,MAAMgD,eAAiBX,OAAOY,aAAezG,KAAKuF,qBAAuBvF,KAAKoF,kBACxHpF,KAAKyF,eAAeiB,cAAc1G,KAAKqF,gBAAiBrF,KAAKsF,kBAC7DtF,KAAK2G,gB,6CAKiB,IAAD,EACwC3G,KAAKyF,eAAexD,mBAAmBjC,KAAKwD,MAAMoD,QAAS,IAA7GtG,EADU,EACf0B,IAAiC6E,EADlB,EACI3G,aACrB4G,EAAsB9G,KAAKyF,eAAesB,mBAAmB/G,KAAKC,QAASK,EAAcN,KAAKwD,MAAMwD,wBACxG,OAAOC,EAAeH,EAAqBD,K,+BAM3C,IAAIvC,EAEJ,GAAItE,KAAKwD,MAAMoD,QACbtC,EAAWtE,KAAKkH,4BACX,GAAIlH,KAAKmF,gBAAkB,EAAG,CACnCnF,KAAKyF,eAAe0B,QAAQnH,KAAKwD,MAAMzD,MADJ,MAEPC,KAAKyF,eAAe2B,SAAzCpF,EAF4B,EAE5BA,IAAK9B,EAFuB,EAEvBA,aACZF,KAAKC,QAAU+B,EACfsC,EAAW2C,EAAejF,EAAK9B,GAGjC,OACE,yBAAKmH,UAAS,6BAAwBrH,KAAKwD,MAAM6D,YAC9C/C,GAAY,kBAAC,IAAMgD,SAAP,KAAgB,0BAAMC,IAAKvH,KAAK+E,eAAgB,KAAW,6BAAM,0BAAMwC,IAAKvH,KAAKkF,eAAgB,SAC7GlF,KAAKwD,MAAMgE,2BAA6BxH,KAAKwD,MAAMgE,0BAA0BxH,KAAKmF,gBAAiBnF,KAAKoF,iBAAkBpF,KAAKuF,0B,GAhFzGP,IAAMyC,WCNxBC,EAAU,CAFN,+1CACA,62C,cCFG/C,E,GAAbgD,E,KAAMC,E,mBCFOjD,E,GAAbgD,E,KAAMC,E,aCDPC,EAAgB,CACpB,IACA,IACA,IACA,SACA,SACA,OACA,IACA,KAwKaC,E,WApKb,aAA+E,IAAnEC,EAAkE,uDAAjD,EAAGC,EAA8C,uDAA5B,EAAGzC,EAAyB,uDAAH,EAAG,oBAC5EvF,KAAKiI,UAAYF,EACjB/H,KAAK+F,WAAaiC,EAClBhI,KAAKuF,oBAAsBA,E,8DAGX2C,EAAGC,EAAGC,GACtBpI,KAAKiI,UAAYC,EACjBlI,KAAK+F,WAAaoC,EAClBnI,KAAKuF,oBAAsB6C,I,qCAGdC,EAASC,EAAQzI,EAAOC,EAAQyI,EAAQC,GAKrD,IAJA,IACMC,GAAmBD,EAAc,GAAK,EACtCE,GAFeH,EAAOhI,OAASiI,EAEI,GAAK,EAErCrG,EAAI,EAAGA,EAAIrC,EAAQqC,IAC1B,IAAK,IAAID,EAAI,EAAGA,EAAIrC,EAAOqC,IAAK,CAI9B,IAHA,IAAIyG,EAAO,EACPC,EAAO,EACPC,EAAO,EACFjF,GAAM8E,EAAkB9E,GAAM8E,EAAkB9E,IACvD,IAAK,IAAID,GAAM8E,EAAiB9E,GAAM8E,EAAiB9E,IAAM,CAC3D,IAAMmF,EAAOlI,KAAKwC,IAAIvD,EAAQ,EAAGe,KAAKC,IAAI,EAAGqB,EAAIyB,IAE3CoF,EAASlJ,EADFe,KAAKwC,IAAItD,EAAS,EAAGc,KAAKC,IAAI,EAAGsB,EAAIyB,IACpBkF,EAExBE,EAAIV,EAAO,EAAIS,GACfE,EAAIX,EAAO,EAAIS,EAAS,GACxBrJ,EAAI4I,EAAO,EAAIS,EAAS,GAExBG,GAAatF,EAAK8E,GAAoBF,GAAe7E,EAAK8E,GAChEE,GAAQK,EAAIT,EAAOW,GACnBN,GAAQK,EAAIV,EAAOW,GACnBL,GAAQnJ,EAAI6I,EAAOW,GAGvB,IAAMC,EAAYtJ,EAAQsC,EAAID,EAC9BmG,EAAQ,EAAIc,GAAaR,EACzBN,EAAQ,EAAIc,EAAY,GAAKP,EAC7BP,EAAQ,EAAIc,EAAY,GAAKN,K,mCAKtBP,EAAQzI,EAAOC,EAAQsJ,GAClC,IAAK,IAAIjH,EAAI,EAAGA,EAAIrC,EAAQqC,IAC1B,IAAK,IAAID,EAAI,EAAGA,EAAIrC,EAAOqC,IAAK,CAC9B,IAAMmH,EAAM,GAAKxJ,EAAQsC,EAAID,GAK7BkH,EAJUd,EAAOe,GACPf,EAAOe,EAAM,GACbf,EAAOe,EAAM,GACbf,EAAOe,EAAM,GACRA,M,6BAKdhB,EAASC,EAAQzI,EAAOC,GAC7BE,KAAKsJ,aAAahB,EAAQzI,EAAOC,GAAQ,SAACkJ,EAAGC,EAAGvJ,EAAGD,EAAG4J,GACpDhB,EAAQgB,GAAO,IAAMhB,EAAQgB,GAC7BhB,EAAQgB,EAAM,GAAK,IAAMhB,EAAQgB,EAAM,GACvChB,EAAQgB,EAAM,GAAK,IAAMhB,EAAQgB,EAAM,Q,gCAIjChB,EAASkB,GACjBvJ,KAAKsJ,aAAaC,EAAUxJ,KAAMwJ,EAAU1J,MAAO0J,EAAUzJ,QAAQ,SAACkJ,EAAGC,EAAGvJ,EAAGD,EAAG4J,GAChF,IAAMG,EAAY,MAASR,EAAI,MAASC,EAAI,MAASvJ,EACrD2I,EAAQgB,GAAOG,EACfnB,EAAQgB,EAAM,GAAKG,EACnBnB,EAAQgB,EAAM,GAAKG,EACnBnB,EAAQgB,EAAM,GAAK5J,O,oCAIT4I,EAASkB,GACrB,IAAME,EAAiB,IAAIjJ,MAAM+I,EAAUxJ,KAAKQ,QAChDP,KAAK0J,UAAUD,EAAgBF,GAE/B,IAUMI,EAAiB,IAAInJ,MAAM+I,EAAUxJ,KAAKQ,QAChDP,KAAK4J,eAAeD,EAAgBF,EAAgBF,EAAU1J,MAAO0J,EAAUzJ,OAX5D,EAChB,EAAG,EAAG,GACN,EAAG,EAAG,GACN,EAAG,EAAG,GAQ0F,GAEnG,IAUM+J,EAAgB,IAAIrJ,MAAM+I,EAAUxJ,KAAKQ,QAC/CP,KAAK4J,eAAeC,EAAeJ,EAAgBF,EAAU1J,MAAO0J,EAAUzJ,OAX5D,EACf,GAAI,GAAI,EACT,EAAG,EAAG,EACN,EAAG,EAAG,GAQyF,GAEjG,IAAK,IAAIgB,EAAI,EAAGA,EAAI6I,EAAepJ,OAAQO,GAAK,EAAG,CACjD,IAAMgJ,EAAiBlJ,KAAKmJ,KAAKnJ,KAAKoJ,IAAIL,EAAe7I,GAAI,GAAKF,KAAKoJ,IAAIH,EAAc/I,GAAI,IAC7FuH,EAAQvH,GAAKgJ,EACbzB,EAAQvH,EAAI,GAAKgJ,EACjBzB,EAAQvH,EAAI,GAAKgJ,EACjBzB,EAAQvH,EAAI,GAAKyI,EAAUxJ,KAAKe,EAAI,GAGtCd,KAAKiK,OAAO5B,EAASA,EAASkB,EAAU1J,MAAO0J,EAAUzJ,U,oCAG7CoK,GACZ,IAAK,IAAIpJ,EAAI,EAAGA,EAAI+G,EAActH,OAAQO,IAAK,CAC7C,IAAMqJ,GAAgBrJ,EAAI,GAAK+G,EAActH,OAE7C,GAAI2J,EADWtJ,KAAKoJ,IAAIG,EAAc,GACpB,OAAOtC,EAAc/G,GAEzC,OAAO+G,EAAcA,EAActH,OAAS,K,8BAGtCgJ,EAAWa,GASjB,IARA,IAAMC,EAAcd,EAAU1J,MAAQ0J,EAAUzJ,OAC1CwK,EAAqB1J,KAAKyD,KAAM+F,EAAoBC,GAAgBrK,KAAK+F,WAAa/F,KAAKiI,YAC3FsC,EAAMhB,EAAUxJ,KAChByK,EAAQ,GACRpI,EAAM,GACNqI,EAAsBlB,EAAU1J,MAAQuK,EACxCM,EAAuBnB,EAAUzJ,OAASwK,EAEvCnI,EAAI,EAAGA,EAAImI,EAAoBnI,IACtC,IAAK,IAAID,EAAI,EAAGA,EAAIkI,EAAmBlI,IAAK,CAK1C,IAHA,IAAMyI,EAAWzI,EAAIuI,EACfG,EAAWzI,EAAIuI,EACjBG,EAAM,EACDC,EAAKF,EAAUE,EAAKF,EAAWF,EAAsBI,IAE5D,IADA,IAAMC,EAAUnK,KAAKK,MAAM6J,GAClBE,EAAKL,EAAUK,EAAKL,EAAWF,EAAqBO,IAAM,CACjE,IAAMC,EAAUrK,KAAKK,MAAM+J,GACrBE,EAAaH,EAAUxB,EAAU1J,MAAQoL,EAC/CT,EAAMK,KAASN,EAAI,EAAIW,GACvBV,EAAMK,KAASN,EAAI,EAAIW,EAAa,GACpCV,EAAMK,KAASN,EAAI,EAAIW,EAAa,GAGxCV,EAAMjK,OAASsK,EAEf,IACMX,EADcM,EAAMW,QAAO,SAACC,EAAKlB,GAAN,OAAckB,EAAMlB,IAAK,IAC/B,IAAMM,EAAMjK,QACvC6B,EAAIqB,KAAKzD,KAAKqL,cAAcnB,IAIhC,OAAO9H,M,KCjEIkJ,E,YAtGb,WAAY9H,GAAQ,IAAD,8BACjB,4CAAMA,KAED+H,MAAQ,CACXpG,gBAAiB,EACjBC,iBAAkB,EAClBG,oBAAqB,EACrBiG,QAAQ,GAGV,EAAKC,eAAiB,IAAI3D,EAC1B,EAAK1H,SAAW,KAChB,EAAKsL,YAAc,GAEnB,EAAKC,SAAW3G,IAAMC,YACtB,EAAK2G,UAAY5G,IAAMC,YAEvB,EAAK4G,YAAc,EAAKA,YAAYjG,KAAjB,gBAjBF,E,iFAoBE,IAAD,OAClB5F,KAAKI,SAAW0L,aAAY,WAC1B,EAAKnF,gBACJ,IAAO3G,KAAK0L,e,6CAIX1L,KAAKI,UAAU2L,cAAc/L,KAAKI,UACtCJ,KAAKI,SAAW,O,+CAIhB,MAAO,CACL,CAAEmB,KAAM,WAAYxB,KAAM,CAAE+B,MAAO,CAAC,EAAE,GAAIjC,MAAOG,KAAKgM,sBAAuB1J,KAAO,IAAI9B,MAAMR,KAAKgM,sBAAwBhM,KAAKiM,uBAAyB,GAAIxL,KAAK,U,6CAKpK,IAAMyL,EAAQlM,KAAK2L,SAAS3F,QACtBmG,EAASnM,KAAK4L,UAAU5F,QACxBoG,EAAUD,EAAOE,WAAW,MAElCF,EAAOtM,MAAQ,IACfsM,EAAOrM,OAASqM,EAAOtM,MAAQqM,EAAMI,YAAcJ,EAAMK,WACzDH,EAAQI,UAAUN,EAAO,EAAG,EAAGC,EAAOtM,MAAOsM,EAAOrM,QAEpD,IAAMyJ,EAAY6C,EAAQK,aAAa,EAAG,EAAGN,EAAOtM,MAAOsM,EAAOrM,SACpC,IAA1BE,KAAKwD,MAAMkJ,YAAqB1M,KAAKyL,eAAekB,cAAcpD,EAAUxJ,KAAMwJ,GACtF6C,EAAQQ,aAAarD,EAAW,EAAG,GAEnC,IAAMsD,EAAkB7M,KAAKyL,eAAeqB,QAAQvD,EAAWvJ,KAAKgM,uBACpE,MAAO,CACL,CAAEzK,KAAM,WAAYxB,KAAM,CAAE+B,MAAO,CAAC,EAAE,GAAIjC,MAAOG,KAAKgM,sBAAuB1J,KAAMuK,EAAgBpM,KAAK,S,4CAK1G,OAAOG,KAAKiD,MAAM7D,KAAKwD,MAAMuJ,UAAY/M,KAAKuL,MAAMpG,mB,6CAIpD,OAAOvE,KAAKiD,OAAO7D,KAAKwD,MAAMwJ,WAAahN,KAAKuL,MAAMhG,qBAAuBvF,KAAKuL,MAAMnG,oB,kCAG9ED,EAAiBC,EAAkBG,GAC7CvF,KAAKyL,eAAewB,kBAAkB9H,EAAiBC,EAAkBG,GACzEvF,KAAKkN,SAAS,CAAE/H,kBAAiBC,mBAAkBG,0B,+BAG3C,IACJjB,EADG,OAeP,OAZItE,KAAKwD,MAAM2J,IAAMnN,KAAK2L,SAAS3F,SAAWhG,KAAK2L,SAAS3F,QAAQsG,aAC9DtM,KAAKuL,MAAMC,OACbxL,KAAK2L,SAAS3F,QAAQoH,QACbpN,KAAK2L,SAAS3F,QAAQwF,QAC/BxL,KAAK2L,SAAS3F,QAAQqH,OAExB/I,EAAWtE,KAAKsN,yBAEZtN,KAAK2L,SAAS3F,UAAYhG,KAAK2L,SAAS3F,QAAQwF,QAAQxL,KAAK2L,SAAS3F,QAAQoH,QAClF9I,EAAWtE,KAAKuN,0BAIhB,kBAAC,IAAMjG,SAAP,KACE,0BAAMkG,QAAS,kBAAM,EAAKN,SAAS,CAAC1B,QAAS,EAAKD,MAAMC,WACtD,kBAAC,EAAD,CACEzL,KAAMuE,EACNgC,aAActG,KAAKwD,MAAMuJ,UACzBvG,cAAexG,KAAKwD,MAAMwJ,WAC1B5G,cAAepG,KAAK6L,eAKxB,yBAAKrH,IAAI,6BAA6B6C,UAAU,8BAA6B,2BAAOoG,UAAQ,EAAC5N,MAAM,QAAQ0H,IAAKvH,KAAK2L,SAAU+B,IAAK1N,KAAKwD,MAAMkK,MAAO,4BAAQnG,IAAKvH,KAAK4L,kB,GAjG/J5G,IAAMyC,W,cCAW9C,E,GAA3BgJ,E,KAAaC,E,KAmCdC,EAAW,CACf,CAAEH,IAAK,gCAAiCI,MAAO,+BAAgCC,IAAK,mFACpF,CAAEL,IAAK,oDAAqDI,MAAO,sBAAuBC,IAAK,mFAC/F,CAAEL,IAAK,uBAAwBI,MAAO,oCAAqCC,IAAK,mFAChF,CAAEL,IAAK,uBAAwBI,MAAO,sCAAuCC,IAAK,mFAClF,CAAEL,IAAK,qBAAsBI,MAAO,iCAAkCC,IAAK,mEAC3E,CAAEL,IAAK,6BAA8BI,MAAO,oCAAqCC,IAAK,oDAoBlFC,EAASL,EAAc,EACvBM,EAAQL,EAAa,EAerBM,EANkB,GAKH,YACwC3N,OAcvD4N,EApBkB,GAmBJ,YACiC5N,O,cC9FjCoE,E,GAAbgD,E,KAAMC,E,KA+EPwG,EAAoBxN,KAAKiD,MAAM,IC9E/BwK,EAAkB,qOTED,KSFC,isB,cAsBJ1J,E,GAAbgD,E,KAAMC,E,KClBE,GACb0G,KPFa,WACb,MAAO,CACLC,iBAAkB,CAChB,CAAEhN,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAAC6F,EAAMC,GAAMtF,KAAM,aAClD,CAAEf,KAAM,WAAYxB,KAAM,CAAE+B,MAAO,CAAC6F,EAAKC,EAAM,GAAI/H,MAAO,GAAIyC,KAAMoF,EAAQ9G,KAAKiD,MAAsB,EAAhBjD,KAAK4N,gBODhGC,SNFa,WACb,MAAO,CACLF,iBAAkB,CAChB,CAAEhN,KAAM,WAAYxB,KAAM,CAAE+B,MAAO,CAAC6F,EAAKC,GAAM/H,MAAO,GAAIyC,KAN/C,QMMfoM,GHwFa,YAA+H,IAA5HC,EAA2H,EAA3HA,KAAMC,EAAqH,EAArHA,QAASC,EAA4G,EAA5GA,UAAWC,EAAiG,EAAjGA,aAAcC,EAAmF,EAAnFA,aAAcC,EAAqE,EAArEA,gBAAiBC,EAAoD,EAApDA,gBAAiBC,EAAmC,EAAnCA,mBAAoBC,EAAe,EAAfA,SACtHC,EAAoBT,EAAD,mBAAyBd,EAASgB,GAAWf,MAA7C,WAAQ,GAEjC,MAAO,CACLS,iBAAkB,CAEhB,CAAEhN,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAAOJ,GAAatL,KAAM,6DAC1D,CAAEf,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAAOJ,EAAa,GAAItL,KAAM,uDAG9D,CAAEf,KAAM,WAAYxB,KAAM,CAAE+B,MAAO,CAACkM,EAAOC,GAAQpO,MAxCzC,GAwCyDyC,KArG9D,+pFAwGL,CAAEf,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAnCd,GAmCwCC,EAlCvC,IAkCkE3L,KAAM,MAAOkB,MAAO,CAAE6D,UAAU,aAAD,OAAesH,EAAO,GAAK,YAAcnB,QAAS,kBAAMoB,GAAQ,OACpL,CAAErN,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAASG,EAAgBF,EAnCtC,IAmCiE3L,KAAM,KAAMkB,MAAO,CAAE6D,UAAU,aAAD,OAAesH,EAAO,WAAa,IAAMnB,QAAS,kBAAMoB,GAAQ,OAGlL,CAAErN,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAvCd,GAuCwCC,EAnCrC,IAmCkE3L,KAAM,OAAQkB,MAAO,CAAE6D,UAAW,YAAamG,QAAS,kBAAMsB,GAAcD,EAAY,EAAIhB,EAAStN,QAAUsN,EAAStN,YAC/M,CAAEgB,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAASE,EAAuBD,EApC3C,IAoCwE3L,KAAM,KAAMkB,MAAO,CAAE6D,UAAW,YAAamG,QAAS,kBAAMsB,GAAcD,EAAY,GAAKhB,EAAStN,YAGjM,CAAEgB,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EA3Cd,GA2CwCC,EAlCpC,IAkCkE3L,KAAM,MAAOkB,MAAO,CAAE6D,UAAU,aAAD,OAAe0H,EAAe,GAAK,YAAcvB,QAAS,kBAAMwB,GAAgB,OACvM,CAAEzN,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAASG,EAAgBF,EAnCnC,IAmCiE3L,KAAM,KAAMkB,MAAO,CAAE6D,UAAU,aAAD,OAAe0H,EAAe,WAAa,IAAMvB,QAAS,kBAAMwB,GAAgB,OAGrM,CAAEzN,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAnCb,GAmCyC,EAAGC,EAlC9C,EAkCuE,GAAI3L,KAAM,IAAKkB,MAAO,CAAE6D,UAAU,aAAD,OAAmC,IAApB4H,EAAwB,WAAa,IAAMzB,QAAS,kBAAM0B,EAAmB,OACrN,CAAE3N,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EApCb,GAoCyC,GAAIC,EAnC/C,EAmCwE,GAAI3L,KAAM,IAAKkB,MAAO,CAAE6D,UAAU,aAAD,OAAmC,IAApB4H,EAAwB,WAAa,IAAMzB,QAAS,kBAAM0B,EAAmB,OACtN,CAAE3N,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EArCb,GAqCyC,GAAIC,EApC/C,EAoCwE,GAAI3L,KAAM,IAAKkB,MAAO,CAAE6D,UAAU,aAAD,OAAmC,IAApB4H,EAAwB,WAAa,IAAMzB,QAAS,kBAAM0B,EAAmB,OACtN,CAAE3N,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAtCb,GAsCyC,EAAGC,EArC9C,EAqCuE,GAAI3L,KAAM,IAAKkB,MAAO,CAAE6D,UAAU,aAAD,OAAmC,IAApB4H,EAAwB,WAAa,IAAMzB,QAAS,kBAAM0B,EAAmB,OACrN,CAAE3N,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAvCb,GAuCyC,EAAGC,EAtC9C,EAsCuE,GAAI3L,KAAM,IAAKkB,MAAO,CAAE6D,UAAU,aAAD,OAAmC,IAApB4H,EAAwB,WAAa,IAAMzB,QAAS,kBAAM0B,EAAmB,OACrN,CAAE3N,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAxCb,GAwCyC,EAAGC,EAvC9C,EAuCuE,GAAI3L,KAAM,IAAKkB,MAAO,CAAE6D,UAAU,aAAD,OAAmC,IAApB4H,EAAwB,WAAa,IAAMzB,QAAS,kBAAM0B,EAAmB,OAGrNP,GAAQ,CAAEpN,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAvCrB,EAuCgDC,EAtCjD,IAsC2E3L,KAAM8M,IACnGT,GAAQ,CAAEpN,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAxCrB,EAwCiDoB,EAAiB7O,OAAS,EAAG0N,EAvC/E,IAuCyG3L,KAAM,OAAQkB,MAAO,CAAEkB,KAAMmJ,EAASgB,GAAWd,OAG5K,CAAExM,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAACkM,EAAQC,EAlE7B,GAkEgD,GAAIlL,SAnErD,GAmEwET,KApFjE,8LAsFnB+M,sCAAuC,SAAClK,EAAiBC,EAAkBG,GACzE,IAAMoC,GAAQqG,EAlEO,GAkEwB7I,EACvCyC,GAAOqG,EAlEO,GAkEsB7I,EAAoBG,EAAsB,EAC9E1F,EA/EQ,GA+EcsF,EACtBrF,EA/ES,GA+EesF,EACxBkK,EAAaH,EAAWF,EAI9B,OAFA/I,QAAQC,IAAR,wBAA6BwB,EAA7B,aAAsCC,EAAtC,aAA8C/H,EAA9C,aAAwD+H,EAAxD,aAAgEqH,EAAhE,aAAoF9J,EAApF,aAAwGC,EAAxG,aAA6HG,IAEtH,CACL,yBAAKf,IAAI,eAAe+K,MAAO,CAAC5H,KAAK,GAAD,OAAIA,EAAJ,MAAcC,IAAI,GAAD,OAAIA,EAAJ,MAAa/H,MAAM,GAAD,OAAIA,EAAJ,MAAeC,OAAO,GAAD,OAAIA,EAAJ,MAAgB0P,SAAS,WAAYL,SAAS,GAAD,OAAIG,EAAJ,MAAoBG,WAAW,GAAD,OAAIH,EAAJ,QACrK,kBAAC,EAAD,CACE9K,IAAG,oBAAeyK,GAClB9B,GAAIwB,EACJjC,WAAYqC,EACZrB,IAAKG,EAASgB,GAAWnB,IACzBX,UAAWlN,EACXmN,WAAYlN,SG/ItB4P,KF6Fa,WACb,MAAO,CACLnB,iBAAkB,CAChB,CAAEhN,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAAC6F,EAAKC,GAAM7E,SAAU,GAAIT,KAvG7C,oJAwGZ,CAAEf,KAAM,WAAYxB,KAAM,CAAE+B,MAAO,CAAC6F,EAAOyG,EAAkB,GAAI7L,aAAa,EAAM1C,MA/DjE,GA+D0FyC,KAnG/F,w5CAmGkHkB,MAAO,CAAE6D,UAAW,oBACpJ,CAAE9F,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAAC6F,EAAK,GAAIpF,aAAa,EAAMQ,SAAU,GAAIT,KA9DzD,gFA+DjB,CAAEf,KAAM,WAAYxB,KAAM,CAAE+B,MAAO,CAAC6F,EAAK,GAAIpF,aAAa,EAAM1C,MA/B1C,GA+BsEyC,KA3D3E,mnFA2DiGkB,MAAO,CAAE6D,UAAW,UACtI,CAAE9F,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAAC6F,EAAK,GAAIpF,aAAa,EAAMQ,SAAU,GAAIT,KA5B7D,qwBEvEjBqN,MDea,WACb,MAAO,CACLpB,iBAAkB,CAChB,CAAEhN,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAAC6F,EAAKC,GAAM7E,SAAU,GAAIT,KAAM+L,QE3B/DuB,EAAQ,wBAMRC,EAAc,SAACrC,EAASsC,GAC5B,MAAO,CAAEzI,UAAW,YAAamG,QAAS,kBAAMA,EAAQsC,MAG3C,WAACC,GACd,MAAO,CAEL,CAAExO,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAAC8C,EAAc,GAAItC,KAAM,uBACxD,CAAEf,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,GAAG8N,EAAMrP,OAAS,GAAI,GAAI+B,KAAMsN,IAC/D,CAAErO,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,GAdlB,WAc8BvB,OAAS,GAAI,GAAI+B,KAd/C,WAc+DkB,MAAO,CAAEkB,KAAM,4DAS3F,CAAEnD,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAAC,KAAM+C,GAAmBvC,KAAM,OAAQkB,MAAOqM,EAAYE,EAAY,UACtG,CAAExO,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAAC,MAAO+C,GAAmBvC,KAAM,OAAQkB,MAAOqM,EAAYE,EAAY,UACvG,CAAExO,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAAC,MAAO+C,GAAmBvC,KAAM,KAAMkB,MAAOqM,EAAYE,EAAY,QACrG,CAAExO,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAAC,MAAO+C,GAAmBvC,KAAM,QAASkB,MAAOqM,EAAYE,EAAY,WAGxG,CAAExO,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAAC8C,EAAcC,GAAmBnB,IAAK,CAAC,OAAQmB,KAC/E,CAAEtD,KAAM,OAAQxB,KAAM,CAAE+B,MAAO,CAAC8C,EXhCf,GWgC4ClB,IAAK,CAAC,OXhClD,OYaNsM,EAdS,SAAC,GAAoE,IAAD,IAAjEC,uBAAiE,MAA/C,IAA+C,MAA1CC,sBAA0C,MAAzB,GAAyB,EAArBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACzEC,EAAiB,EACjBjQ,EAAW0L,aAAY,WACzBuE,GAAkBH,EAElBC,EAAOvP,KAAKwC,IAAI,EAAGiN,EAAiBJ,IAEhCI,GAAkBJ,IACpBlE,cAAc3L,GACdgQ,OAEDF,ICiEUI,EA5DE,WACf,IACIC,EADaC,cACOD,SAAS9L,UAAU,GACtCgM,EAAmBC,eAAeH,KAAWA,EAAW,QAHxC,MAKSI,mBAASJ,GALlB,mBAKhBT,EALgB,KAKNc,EALM,OAMeD,mBAAS,MANxB,mBAMhBE,EANgB,KAMHC,EANG,OAOqCH,mBAAS,GAP9C,mBAOhB3J,EAPgB,KAOQ+J,EAPR,OAQCJ,oBAAS,GARV,mBAQhBhC,EARgB,KAQVC,EARU,OASW+B,mBAAS,GATpB,mBAShB9B,EATgB,KASLC,EATK,OAUiB6B,oBAAS,GAV1B,mBAUhB5B,EAVgB,KAUFC,EAVE,OAWuB2B,mBAAS,GAXhC,mBAajBK,EAAoB,CACtBtC,GAAI,CACFC,OACAC,UACAC,YACAC,eACAC,eACAC,kBACAC,gBArBiB,KAsBjBC,mBAtBiB,KAuBjBC,SAzBY,KAEK,EA2C+CsB,EAAmBX,GAAUkB,EAAkBlB,IAA3GvB,EA3Ca,EA2CbA,iBAAkBc,EA3CL,EA2CKA,sCACpB4B,EAAgBC,GAjBH,SAAbC,EAAaC,GAAe,IAGNC,EAAwBZ,EAAmBW,GAAaJ,EAAkBI,IAA5F7C,iBAERuC,EAAe,GAAD,mBAAMO,GAAN,YAA8BH,EAAiBC,MAE7DnB,EAAgB,CACdG,OAAQY,EACRX,OAAQ,WACNQ,EAAYQ,GACZN,EAAe,YAQrB,OACE,yBAAKzJ,UAAU,OAAOkI,MAAO,CAAEJ,SAAS,GAAD,OAjDzB,GAiDyB,MAAoBM,WAAW,GAAD,OAjDvD,GAiDuD,QACnE,kBAAC,EAAD,CACEpI,UAAU,kBACVtH,KAAI,sBAAMwO,GAAN,YAA2B0C,IAC/BzJ,2BAA6BqJ,GAAexB,EAC5CzI,QAASiK,EACT7J,uBAAwBA,EACxBtB,YAAU,MCpDlB4L,IAASlK,OAAO,mBAZhB,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmK,KAAK,KACV,kBAAC,EAAD,WAOM,MAASC,SAASC,eAAe,W","file":"static/js/main.158c643e.chunk.js","sourcesContent":["// TODO: data format description\n\nconst interpolate = (a, b, t) => {\n  return a * (1 - t) + b * t;\n};\n\n\nclass StringRenderer {\n  constructor(width, height, data) {\n    this.content = '';\n    this.textMetadata = [];\n    this.data = data || [];\n    this.width = width; // character width of render area (probably screen width)\n    this.breakWidth = this.width + 1;\n    this.height = height; // character height of render area (probably screen height)\n    this.interval = null;\n  }\n\n  setData(data) {\n    this.data = data;\n  }\n\n  getContent() {\n    return this.content;\n  }\n\n  setContent(content) {\n    this.content = content;\n  }\n\n  getTextMetadata() {\n    return this.textMetadata;\n  }\n\n  interpolateContent(initialContent, finalContent, t) {\n    if (initialContent.length > finalContent.length) {\n      finalContent += (new Array(initialContent.length - finalContent.length + 1)).join(' ');\n    } else if (finalContent.length > initialContent.length) {\n      initialContent += (new Array(finalContent.length - initialContent.length + 1)).join(' ');\n    }\n    let interpolatedArr = new Array(initialContent.length);\n\n    const maxLength = Math.max(initialContent.length, finalContent.length);\n    for (let i = 0; i < maxLength; i++) {\n      if (i % this.breakWidth === this.breakWidth - 1) {\n        interpolatedArr[i] = '\\n';\n      } else {\n        interpolatedArr[i] = String.fromCharCode(Math.round(interpolate(initialContent[i].charCodeAt(), finalContent[i].charCodeAt(), t)));\n      }\n    }\n\n    return interpolatedArr.join('');\n  }\n\n  fillEmptyEntriesAndAddLineBreaks(chars) {\n    for (let i = 0, len = chars.length; i < len; i++) {\n      chars[i] = chars[i] || '\\u0020';\n      if (i % this.breakWidth === this.breakWidth - 1) chars[i] = '\\n';\n    }\n  }\n\n  generateRenderData(inputData, textMetadata) {\n    let chars = [];\n    let relativeY = 0;\n\n    for (let i = 0; i < inputData.length; i++) {\n      if (!inputData[i]) continue;\n\n      const {type, data} = inputData[i];\n\n      if (type === 'text') {\n        relativeY = this.renderText(chars, textMetadata, data, relativeY);\n      } else if (type === 'textrect') {\n        relativeY = this.renderTextrect(chars, textMetadata, data, relativeY);\n      } else if (type === 'line') {\n        this.renderLine(chars, data);\n      }\n    }\n\n    textMetadata.sort((chunk1, chunk2) => chunk1.start - chunk2.start);\n\n    this.fillEmptyEntriesAndAddLineBreaks(chars);\n\n    return { str: chars.join(''), textMetadata };\n  }\n\n  render() {\n    this.textMetadata.length = 0;\n\n    let { str, textMetadata } = this.generateRenderData(this.data, this.textMetadata);\n\n    this.content = str;\n\n    return { str: this.content, textMetadata: this.textMetadata };\n  }\n\n  getIdxWithBreaks(x, y) {\n    return y * this.breakWidth + x;\n  }\n\n  // if inputData.maxWidth is specified, text will wrap\n  //  if it exceeds the page width. Note that it will not\n  //  push other non-relative text down, so it may cause overlaps\n  renderText(out, chunkMetadata, inputData, relativeY) {\n    let { text, start: [x, y], isYRelative } = inputData;\n    x = this.parseWidth(x);\n    y = this.parseHeight(out, y);\n    if (isYRelative) y += relativeY;\n    if (x < 0) x += this.width;\n\n    const initX = x;\n    let chunkStart = Infinity;\n    let chunkEnd = -Infinity;\n    let maxY = 0;\n\n    for (let i = 0; i < text.length; i++, x++) {\n      if (text[i] === '\\n') {\n        x = initX - 1;\n        y++;\n        continue;\n      }\n\n      if (x < 0) continue;\n      if (x >= this.width && !inputData.maxWidth) continue;\n\n      if (inputData.maxWidth) {\n        if (x >= this.width || x - initX + 1 > inputData.maxWidth) {\n          x = initX;\n          y++;\n        } else if (text[i] === ' ') { // break lines on spaces\n          const nextNewlineIdx = text.indexOf('\\n', i + 1);\n          const nextSpaceIdx = text.indexOf(' ', i + 1); // NOTE: current implementation requires a space at the end of wrapped text in order to wrap the last word correctly\n          const nextBreakIdx = (nextNewlineIdx === -1 || nextSpaceIdx === -1) ? Math.max(nextSpaceIdx, nextNewlineIdx) : Math.min(nextSpaceIdx, nextNewlineIdx);\n          const nextBreakX = (nextBreakIdx - i) + x; // (index within text of next break - current index in text) + current x == x of next break\n          if (nextBreakIdx > 0 && (nextBreakX > this.width || nextBreakX - initX + 1 > inputData.maxWidth)) {\n            x = initX;\n            y++;\n            i++;\n          }\n        }\n      }\n      const outIdx = this.getIdxWithBreaks(x, y);\n\n      out[outIdx] = text[i];\n      chunkStart = Math.min(chunkStart, outIdx);\n      chunkEnd = Math.max(chunkEnd, outIdx);\n      maxY = Math.max(maxY, y);\n    }\n    if (chunkMetadata && inputData.props) chunkMetadata.push({ start: chunkStart, end: chunkEnd, inputData });\n    return maxY;\n  }\n\n  // note: inputData reference may be shared by multiple chunkMetadata entries\n  renderTextrect(out, chunkMetadata, inputData, relativeY) {\n    let { text, start: [x, y], width, isYRelative } = inputData;\n    x = this.parseWidth(x);\n    y = this.parseHeight(out, y);\n    if (isYRelative) y += relativeY;\n    if (x < 0) x += this.width;\n\n    let chunkStart = -Infinity;\n    let chunkEnd = -Infinity;\n    let maxY = 0;\n\n    for (let i = 0; i < text.length; i++) {\n      if (x + (i % width) < 0 || x + (i % width) >= this.width) continue;\n      const dx = i % width;\n      const dy = Math.floor(i / width);\n      const outIdx = this.getIdxWithBreaks(x + dx, y + dy);\n      out[outIdx] = text[i];\n      maxY = Math.max(maxY, y + dy);\n\n      if (outIdx > chunkEnd + 1) { // if we've wrapped lines, create new metadata\n        if (isFinite(chunkEnd) && chunkMetadata && inputData.props) {\n          chunkMetadata.push({ start: chunkStart, end: chunkEnd, inputData });\n        }\n        chunkStart = outIdx;\n      }\n      chunkEnd = outIdx;\n    }\n\n    if (isFinite(chunkEnd) && chunkMetadata && inputData.props) chunkMetadata.push({ start: chunkStart, end: chunkEnd, inputData });\n\n    return maxY;\n  }\n\n  renderLine(out, inputData) {\n    const { start, end } = inputData;\n    if (start[0] === end[0] && start[1] === end[1]) { // point\n      const outIdx = this.getIdxWithBreaks(start[0], start[1]);\n      out[outIdx] = '\\u00b7';\n    } else if (start[0] === end[0]) { // vertical\n      const startHeight = this.parseHeight(out, start[1]);\n      const endHeight = this.parseHeight(out, end[1]);\n      for (let i = startHeight; i <= endHeight; i++) {\n        const outIdx = this.getIdxWithBreaks(this.parseWidth(start[0]), i);\n        out[outIdx] = '|';\n      }\n    } else if (start[1] === end[1]) { // horizontal\n      const startWidth = this.parseWidth(start[0]);\n      const endWidth = this.parseWidth(end[0]);\n      for (let i = startWidth; i <= endWidth; i++) {\n        const outIdx = this.getIdxWithBreaks(i, this.parseHeight(out, start[1]));\n        out[outIdx] = '\\u2014';\n      }\n    }\n  }\n\n  parseWidth(dim) {\n    return typeof dim === 'number' ? dim : Math.floor(parseFloat(dim) * this.width / 100);\n  }\n\n  parseHeight(chars, dim) {\n    if (typeof dim === 'number') return dim;\n    const height = Math.max(this.height, Math.ceil(chars.length / this.width));\n    return parseFloat(dim) * height / 100;\n  }\n\n  setDimensions(width, height) {\n    this.width = width;\n    this.breakWidth = this.width + 1;\n    this.height = height;\n  }\n}\n\nexport default StringRenderer;\n","import React from 'react';\n\n// inputs:\n//   str: big string with line breaks and spaces\n//   textMetadata: array of chunk metadata describing how to wrap intervals in the string\n//                 assumed to be in order by start index\n\nexport default (str, textMetadata) => {\n  let elements = [];\n\n  let lastEnd = -1; // the last index we've added to elements already\n  for (let i = 0; i < textMetadata.length; i++) {\n    let { start, end, inputData } = textMetadata[i];\n    start = Math.max(start, lastEnd + 1);\n    if (start > lastEnd + 1) elements.push(<span key={`span-prev-${i}`}>{str.substring(lastEnd + 1, start)}</span>);\n    if (inputData && inputData.props && inputData.props.href) {\n      elements.push(<a key={`a-${i}`} {...inputData.props}>{str.substring(start, end + 1)}</a>);\n    } else {\n      elements.push(<span key={`span-${i}`} {...inputData.props}>{str.substring(start, end + 1)}</span>);\n    }\n    lastEnd = end;\n  }\n  if (lastEnd < str.length) elements.push(<span key=\"span-last\">{str.substring(lastEnd + 1, str.length)}</span>);\n  return elements;\n};","const navWidth = 0;\nconst topBarHeight = 7;\nconst contentOffsets = [ navWidth + 2, topBarHeight + 2 ];\n\nconst maxPagePxWidth = 1400;\n\nexport { navWidth, topBarHeight, contentOffsets, maxPagePxWidth };","import React from 'react';\n\nimport StringRenderer from '../StringRenderer';\nimport metadataParser from '../metadataParser';\nimport { maxPagePxWidth } from '../constants';\n\nconst getWindowWidth = () => {\n  return Math.min(window.innerWidth, maxPagePxWidth);\n};\n\n\n\nclass StringRenderArea extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.singleCharRef = React.createRef();\n    this.doubleCharRef = React.createRef(); // it seems like characters blocks have some vertical padding, so use a single height char and a double-height char to figure out what that padding is\n\n    this.singleCharWidth = -1;\n    this.singleCharHeight = -1;\n    this.windowCharWidth = 40;\n    this.windowCharHeight = 40;\n    this.verticalCharPadding = 0;\n    this.resizeHandler = null;\n    this.content = '';\n    this.stringRenderer = new StringRenderer(this.windowCharWidth, this.windowCharHeight, props.data);\n  }\n\n  // when component mounts, set up resize handler and figure out pixel dims of a single character\n  // also use height of two chars in a column to find the padding around each text block\n  componentDidMount() {\n    if (this.props.autoResize) {\n      this.resizeHandler = this.resize.bind(this);\n      window.addEventListener('resize', this.resizeHandler);\n    }\n\n    const charHeight = this.singleCharRef.current.getBoundingClientRect().height;\n    const doubleCharHeight = this.doubleCharRef.current.getBoundingClientRect().height;\n    const verticalCharPadding = 2 * charHeight - doubleCharHeight; // total vertical padding around a text block\n\n    this.singleCharWidth = this.singleCharRef.current.getBoundingClientRect().width;\n    this.singleCharHeight = charHeight - verticalCharPadding;\n    this.verticalCharPadding = verticalCharPadding;\n\n    console.log('SINGLE RENDER AREA:', this.singleCharWidth, this.singleCharHeight, this.verticalCharPadding);\n\n    this.resize();\n    if (this.props.onSetCharDims) this.props.onSetCharDims(this.singleCharWidth, this.singleCharHeight, this.verticalCharPadding);\n  }\n\n  // when component is about to unmount, remove resize handler\n  componentWillUnmount() {\n    if (this.resizeHandler) {\n      window.removeEventListener('resize', this.resizeHandler);\n      this.resizeHandler = null;\n    }\n  }\n\n  // handle resizing by updating stringRenderer with new width and forcing a re-render\n  resize() {\n    this.windowCharWidth = Math.floor((this.props.fixedWidthPx || getWindowWidth()) / this.singleCharWidth);\n    this.windowCharHeight = Math.floor(((this.props.fixedHeightPx || window.innerHeight) - this.verticalCharPadding) / this.singleCharHeight);\n    this.stringRenderer.setDimensions(this.windowCharWidth, this.windowCharHeight);\n    this.forceUpdate();\n  }\n\n  // if animation data is being sent into the component (via props.newData and props.interpolationParameter),\n  // perform interpolation and return corresponding elements\n  interpolateToNewData() {\n    let { str: finalContent, textMetadata: finalTextMetadata } = this.stringRenderer.generateRenderData(this.props.newData, []);\n    let intermediateContent = this.stringRenderer.interpolateContent(this.content, finalContent, this.props.interpolationParameter);\n    return metadataParser(intermediateContent, finalTextMetadata);\n  }\n\n  // if we're animating (i.e., props.newData is set), interpolate with old page data\n  // if not, and if we've already found the width of a char, generate elements from this.props.data\n  render() {\n    let elements;\n\n    if (this.props.newData) {\n      elements = this.interpolateToNewData();\n    } else if (this.singleCharWidth > 0) {\n      this.stringRenderer.setData(this.props.data);\n      const {str, textMetadata} = this.stringRenderer.render();\n      this.content = str;\n      elements = metadataParser(str, textMetadata);\n    }\n\n    return (\n      <div className={`string-render-area ${this.props.className}`}>\n        {elements || <React.Fragment><span ref={this.singleCharRef}>{'_'}</span><br /><span ref={this.doubleCharRef}>{'_\\n_'}</span></React.Fragment>}\n        {this.props.childElementDataGenerator && this.props.childElementDataGenerator(this.singleCharWidth, this.singleCharHeight, this.verticalCharPadding)}\n      </div>\n    );\n  }\n}\n\nexport default StringRenderArea;\n","const face1 = '                          /--- //\\\\_         /\\\\\\\\/\\\\/\\\\-\\\\/\\\\-\\\\      -/\\\\M\\\\\\\\/\\\\ \\\\\\\\MM-\\\\   ///          ||\\\\|   //            \\\\\\\\|   ||/==>   <==\\\\ |||   || <a>   <a>   |/)  \\\\|      |     /|/    |    / \\\\    /||     |  _ ^-^) _   |     \\\\\\\\( ______ )/ /      \\\\  \\\\____/ / /        \\\\         /          \\\\\\\\_____//      ';\nconst face2 = '                          /--- //\\\\_         /\\\\\\\\/\\\\/\\\\-\\\\/\\\\-\\\\      -/\\\\M\\\\\\\\/\\\\ \\\\\\\\MM-\\\\   ///          ||\\\\|   //       <==  \\\\\\\\|   ||/==>      \\\\ |||   || <a>   <a>   |/)  \\\\|      |     /|/    |    / \\\\    /||     |  _ ^-^) _   |     \\\\\\\\( ______ )/ /      \\\\  \\\\____/ / /        \\\\         /          \\\\\\\\_____//      ';\nexport const FACE = [face1, face2];\n\nconst dancing1 = '                                      ||                                              _||\\\\\\\\\\\\                                           \\\\_  _\\\\                         /--- //\\\\_           \\\\  \\\\                       /\\\\\\\\/\\\\/\\\\-\\\\/\\\\-\\\\          \\\\  \\\\                     -/\\\\M\\\\\\\\/\\\\ \\\\\\\\MM-\\\\          \\\\  \\\\                  ///          ||\\\\|           \\\\  \\\\                 //            \\\\\\\\|            \\\\  \\\\                ||/==>   <==\\\\ |||             \\\\  \\\\               || <a>   <a>   |/)            /  |               \\\\|      |     /|/            /   /                |    / \\\\    /||            /   /                 |  _ ^-^) _   |           /   /                  \\\\\\\\( ______ )/ |          /___/_                   \\\\  \\\\____/ /  /         /     |                    \\\\         //|        /      /                     \\\\\\\\______// |\\\\      /      |              _______/|          / \\\\____/      /              /        \\\\         /             /              /          \\\\_______/             /              /                                |              /                                /              /                                /              /      /|    S E A T T L E       /              /______/ |                       |               |    /   |   M A R I N E R S     |               |   |    |                       |            ';\nconst dancing2 = '         ||                                            ///||_                                           /_  _/                                           /  /         /--- //\\\\_                          /  /        /\\\\\\\\/\\\\/\\\\-\\\\/\\\\-\\\\                       /  /        -/\\\\M\\\\\\\\/\\\\ \\\\\\\\MM-\\\\                     /  /       ///          ||\\\\|                    /  /        //            \\\\\\\\|                   /  /         ||/==>   <==\\\\ |||                   |  \\\\         || <a>   <a>   |/)                  \\\\   \\\\        \\\\|      |     /|/                    \\\\   \\\\        |    / \\\\    /||                      \\\\   \\\\       |  _ ^-^) _   |                      _\\\\___\\\\      \\\\\\\\( ______ )/ |                      |     \\\\      \\\\  \\\\____/ /  /                      \\\\      \\\\      \\\\         //|                       |      \\\\      \\\\\\\\______// |\\\\                       \\\\      \\\\____/|          / \\\\_______                \\\\           \\\\         /          \\\\                \\\\           \\\\_______/            \\\\                |                                \\\\                \\\\                                \\\\                \\\\                                \\\\                \\\\     S E A T T L E      |\\\\      \\\\                |                       | \\\\______\\\\               |   M A R I N E R S     |   \\\\    |               |                       |    |   |   ';\nexport const DANCING = [dancing1, dancing2];\n","import { DANCING } from '../asciiArt';\nimport { contentOffsets } from '../constants';\n\nconst [left, top] = contentOffsets;\n\nexport default () => {\n  return {\n    stringRenderData: [\n      { type: 'text', data: { start: [left, top], text: \"I'm Ben:\" }},\n      { type: 'textrect', data: { start: [left,top + 2], width: 49, text: DANCING[Math.floor(Math.random() * 2)] }}\n    ]\n  };\n};","import { contentOffsets } from '../constants';\nconst [left, top] = contentOffsets;\n\nconst projects = '\\\n';\n\nexport default () => {\n  return {\n    stringRenderData: [\n      { type: 'textrect', data: { start: [left,top], width: 40, text: projects }}\n    ]\n  };\n}","const CHAR_GRADIENT = [\n  '#',\n  'm',\n  'o',\n  '\\u2022',\n  '\\u2218',\n  '\\u00b7',\n  '.',\n  ' '\n];\n\nclass ImageConverter {\n  constructor(characterWidth = 1, characterHeight = 2, verticalCharPadding = 0) {\n    this.charWidth = characterWidth; // width of a single character\n    this.charHeight = characterHeight; // height of a single character\n    this.verticalCharPadding = verticalCharPadding; // padding around a block of text\n  }\n\n  setCharDimensions(w, h, p) {\n    this.charWidth = w;\n    this.charHeight = h;\n    this.verticalCharPadding = p;\n  }\n\n  convolveKernel(outRgba, inRgba, width, height, kernel, kernelWidth) {\n    const kernelHeight = kernel.length / kernelWidth;\n    const kernelHalfWidth = (kernelWidth - 1) / 2;\n    const kernelHalfHeight = (kernelHeight - 1) / 2;\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        let rsum = 0;\n        let gsum = 0;\n        let bsum = 0;\n        for (let dy = -kernelHalfHeight; dy <= kernelHalfHeight; dy++) {\n          for (let dx = -kernelHalfWidth; dx <= kernelHalfWidth; dx++) {\n            const xIdx = Math.min(width - 1, Math.max(0, x + dx));\n            const yIdx = Math.min(height - 1, Math.max(0, y + dy));\n            const offset = width * yIdx + xIdx;\n\n            const r = inRgba[4 * offset];\n            const g = inRgba[4 * offset + 1];\n            const b = inRgba[4 * offset + 2];\n\n            const kernelIdx = (dy + kernelHalfHeight) * kernelWidth + (dx + kernelHalfWidth);\n            rsum += r * kernel[kernelIdx];\n            gsum += g * kernel[kernelIdx];\n            bsum += b * kernel[kernelIdx];\n          }\n        }\n        const outOffset = width * y + x;\n        outRgba[4 * outOffset] = rsum;\n        outRgba[4 * outOffset + 1] = gsum;\n        outRgba[4 * outOffset + 2] = bsum;\n      }\n    }\n  }\n\n  forEachPixel(inRgba, width, height, fn) {\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const idx = 4 * (width * y + x); // index into inRgba\n        const r = inRgba[idx];\n        const g = inRgba[idx + 1];\n        const b = inRgba[idx + 2];\n        const a = inRgba[idx + 3];\n        fn(r, g, b, a, idx);\n      }\n    }\n  }\n\n  invert(outRgba, inRgba, width, height) {\n    this.forEachPixel(inRgba, width, height, (r, g, b, a, idx) => {\n      outRgba[idx] = 255 - outRgba[idx];\n      outRgba[idx + 1] = 255 - outRgba[idx + 1];\n      outRgba[idx + 2] = 255 - outRgba[idx + 2];\n    });\n  }\n\n  grayscale(outRgba, imageData) {\n    this.forEachPixel(imageData.data, imageData.width, imageData.height, (r, g, b, a, idx) => {\n      const intensity = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n      outRgba[idx] = intensity;\n      outRgba[idx + 1] = intensity;\n      outRgba[idx + 2] = intensity;\n      outRgba[idx + 3] = a;\n    });\n  }\n\n  edgeDetection(outRgba, imageData) {\n    const grayscaleImage = new Array(imageData.data.length);\n    this.grayscale(grayscaleImage, imageData);\n\n    const sobelHoriz = [\n      -1, 0, 1,\n      -2, 0, 2,\n      -1, 0, 1\n    ];\n    const scharrHoriz = [\n      3, 0, -3,\n      10, 0, -10,\n      3, 0, -3\n    ];\n    const horizConvolved = new Array(imageData.data.length);\n    this.convolveKernel(horizConvolved, grayscaleImage, imageData.width, imageData.height, sobelHoriz, 3);\n\n    const sobelVert = [\n      -1, -2, -1,\n      0, 0, 0,\n      1, 2, 1\n    ];\n    const scharrVert = [\n      3, 10, 3,\n      0, 0, 0,\n      -3, -10, -3\n    ];\n    const vertConvolved = new Array(imageData.data.length);\n    this.convolveKernel(vertConvolved, grayscaleImage, imageData.width, imageData.height, sobelVert, 3);\n\n    for (let i = 0; i < horizConvolved.length; i += 4) {\n      const finalIntensity = Math.sqrt(Math.pow(horizConvolved[i], 2) + Math.pow(vertConvolved[i], 2));\n      outRgba[i] = finalIntensity;\n      outRgba[i + 1] = finalIntensity;\n      outRgba[i + 2] = finalIntensity;\n      outRgba[i + 3] = imageData.data[i + 3];\n    }\n\n    this.invert(outRgba, outRgba, imageData.width, imageData.height);\n  }\n\n  getCharForVal(val) {\n    for (let i = 0; i < CHAR_GRADIENT.length; i++) {\n      const linearThresh = (i + 1) / CHAR_GRADIENT.length;\n      const thresh = Math.pow(linearThresh, 1);\n      if (val < thresh) return CHAR_GRADIENT[i];\n    }\n    return CHAR_GRADIENT[CHAR_GRADIENT.length - 1];\n  }\n\n  convert(imageData, outCharacterWidth) {\n    const aspectRatio = imageData.width / imageData.height;\n    const outCharacterHeight = Math.ceil((outCharacterWidth / aspectRatio) / (this.charHeight / this.charWidth));\n    const rgb = imageData.data;\n    const block = [];\n    const out = [];\n    const imageCharacterWidth = imageData.width / outCharacterWidth;\n    const imageCharacterHeight = imageData.height / outCharacterHeight;\n\n    for (let y = 0; y < outCharacterHeight; y++) { // for each character row\n      for (let x = 0; x < outCharacterWidth; x++) { // for each character in row\n        // find block of source image that corresponds to this character\n        const pxOffset = x * imageCharacterWidth;\n        const pyOffset = y * imageCharacterHeight;\n        let ctr = 0;\n        for (let py = pyOffset; py < pyOffset + imageCharacterHeight; py++) {\n          const roundPy = Math.round(py);\n          for (let px = pxOffset; px < pxOffset + imageCharacterWidth; px++) {\n            const roundPx = Math.round(px);\n            const pixelIndex = roundPy * imageData.width + roundPx;\n            block[ctr++] = rgb[4 * pixelIndex];\n            block[ctr++] = rgb[4 * pixelIndex + 1];\n            block[ctr++] = rgb[4 * pixelIndex + 2];\n          }\n        }\n        block.length = ctr;\n\n        const blockRgbSum = block.reduce((acc, val) => acc + val, 0);\n        const val = blockRgbSum / (255 * block.length);\n        out.push(this.getCharForVal(val));\n      }\n    }\n\n    return out;\n  }\n}\n\nexport default ImageConverter;","import React from 'react';\nimport StringRenderArea from './StringRenderArea';\nimport ImageConverter from '../ImageConverter';\n\nclass TV extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      singleCharWidth: 1,\n      singleCharHeight: 2,\n      verticalCharPadding: 0,\n      paused: false\n    };\n\n    this.imageConverter = new ImageConverter();\n    this.interval = null;\n    this.refreshRate = 30;\n\n    this.videoRef = React.createRef();\n    this.canvasRef = React.createRef();\n\n    this.setCharDims = this.setCharDims.bind(this);\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.forceUpdate();\n    }, 1000 / this.refreshRate);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  getBlankScreenElements() {\n    return [ // TODO maybe we could reuse resources from frame to frame\n      { type: 'textrect', data: { start: [0,0], width: this.getCharWidthTvUnits(), text: (new Array(this.getCharWidthTvUnits() * this.getCharHeightTvUnits() + 1)).join('#') }}\n    ];\n  }\n\n  getElementsFromVideo() {\n    const video = this.videoRef.current;\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    canvas.width = 300;\n    canvas.height = canvas.width * video.videoHeight / video.videoWidth;\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n    if (this.props.edgeModeOn === true) this.imageConverter.edgeDetection(imageData.data, imageData);\n    context.putImageData(imageData, 0, 0);\n\n    const asciiImageArray = this.imageConverter.convert(imageData, this.getCharWidthTvUnits());\n    return [\n      { type: 'textrect', data: { start: [0,0], width: this.getCharWidthTvUnits(), text: asciiImageArray.join('') } }\n    ];\n  }\n\n  getCharWidthTvUnits() {\n    return Math.floor(this.props.tvWidthPx / this.state.singleCharWidth);\n  }\n\n  getCharHeightTvUnits() {\n    return Math.floor((this.props.tvHeightPx - this.state.verticalCharPadding) / this.state.singleCharHeight);\n  }\n\n  setCharDims(singleCharWidth, singleCharHeight, verticalCharPadding) {\n    this.imageConverter.setCharDimensions(singleCharWidth, singleCharHeight, verticalCharPadding);\n    this.setState({ singleCharWidth, singleCharHeight, verticalCharPadding });\n  }\n\n  render() {\n    let elements;\n\n    if (this.props.on && this.videoRef.current && this.videoRef.current.videoHeight) {\n      if (this.state.paused) {\n        this.videoRef.current.pause();\n      } else if (this.videoRef.current.paused) {\n        this.videoRef.current.play();\n      }\n      elements = this.getElementsFromVideo();\n    } else {\n      if (this.videoRef.current && !this.videoRef.current.paused) this.videoRef.current.pause();\n      elements = this.getBlankScreenElements();\n    }\n\n    return (\n      <React.Fragment>\n        <span onClick={() => this.setState({paused: !this.state.paused})}>\n          <StringRenderArea\n            data={elements}\n            fixedWidthPx={this.props.tvWidthPx}\n            fixedHeightPx={this.props.tvHeightPx}\n            onSetCharDims={this.setCharDims}\n          />\n        </span>\n\n        {/* hidden video and canvas elements from which to pull image data */}\n        <div key=\"video-helper-elt-container\" className=\"video-helper-elt-container\"><video controls width=\"300px\" ref={this.videoRef} src={this.props.src} /><canvas ref={this.canvasRef} /></div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TV;\n","import React from 'react';\nimport TV from '../components/TV.js';\nimport { contentOffsets } from '../constants';\n\nconst [contentLeft, contentTop] = contentOffsets;\n\nconst tv = '\\\n__________________________________________________________________________________________\\\n|                                                                    |                   |\\\n|  ________________________________________________________________  |___________________|\\\n|  |\\\\____________________________________________________________/|  |    - QUALITY -    |\\\n|  ||                                                            ||  |      _______      |\\\n|  ||                                                            ||  |     / _____ \\\\     |\\\n|  ||                                                            ||  |    / /   //\\\\ \\\\    |\\\n|  ||                                                            ||  |   / /   //  \\\\ \\\\   |\\\n|  ||                                                            ||  |   \\\\ \\\\  //   / /   |\\\n|  ||                                                            ||  |    \\\\ \\\\_____/ /    |\\\n|  ||                                                            ||  |     \\\\_______/     |\\\n|  ||                                                            ||  |                   |\\\n|  ||                                                            ||  |    - CHANNEL -    |\\\n|  ||                                                            ||  |    DOWN     UP    |\\\n|  ||                                                            ||  |                   |\\\n|  ||                                                            ||  |    -EDGE MODE-    |\\\n|  ||                                                            ||  |    OFF      ON    |\\\n|  ||                                                            ||  |___________________|\\\n|  ||                                                            ||  | _________________ |\\\n|  ||                                                            ||  | _________________ |\\\n|  ||                                                            ||  | _________________ |\\\n|  ||                                                            ||  | _________________ |\\\n|  ||                                                            ||  | _________________ |\\\n|  ||                                                            ||  | _________________ |\\\n|  ||____________________________________________________________||  |___________________|\\\n|  |/____________________________________________________________\\\\|  |                   |\\\n|                                                                    |         ||        |\\\n|____________________________________________________________________|___________________|\\\n|  /                                                                                  \\\\  |\\\n|_/                                                                                    \\\\_|\\\n';\n\nconst CHANNELS = [\n  { src: \"/yell-ElkandCars000125MTS.mp4\", title: \"Bull elk ramming a car (NPS)\", url: \"https://www.nps.gov/media/video/view.htm?id=CEF4E37F-1DD8-B71B-0B7B5EC8C8071E13\" },\n  { src: \"/yell-BighornSheep00697MTS_original_1920x1080.mp4\", title: \"Bighorn Sheep (NPS)\", url: \"https://www.nps.gov/media/video/view.htm?id=0E023AB3-155D-451F-677AEBFA0925A047\" },\n  { src: \"/yell-GBear00452.mp4\", title: \"Grizzly Bear (early spring) (NPS)\", url: \"https://www.nps.gov/media/video/view.htm?id=DCE37092-155D-451F-67F448AC5DE819B0\" },\n  { src: \"/grca-paddleraft.mp4\", title: \"Paddle Assisted Raft in Rapid (NPS)\", url: \"https://www.nps.gov/media/video/view.htm?id=5A9F1B07-155D-451F-673B996C4F4164BA\" },\n  { src: \"/grca-trainmix.mp4\", title: \"Grand Canyon Railway Mix (NPS)\", url: \"https://www.nps.gov/grca/learn/photosmultimedia/b-roll_hd29.htm\" },\n  { src: \"/242_OceanWorlds_small.mp4\", title: \"ScienceCasts: Ocean Worlds (NASA)\", url: \"https://images.nasa.gov/details-242_OceanWorlds\"}\n  // { src: \"yell-CTTroutGOPRO104MP4.mp4\", title: \"Cutthroat Trout (NPS)\", url: \"https://www.nps.gov/media/video/view.htm?id=A9E1779E-155D-451F-678DD7B58221E1E8\" },\n  // { src: \"/jsc2017m001167_2017_Space_Station_Science_in_Pictures_MP4_small.mp4\", title: \"2017 Space Station Science in Pictures (NASA)\", url: \"https://images.nasa.gov/details-jsc2017m001167_2017_Space_Station_Science_in_Pictures_MP4\" },\n];\n\nconst wrapppedTvText = '\\\nAbout this TV page\\n\\\n----------------------\\n\\\n\\n\\\nWhy these videos?\\n\\\n\\n\\\nI was looking for some public domain videos to use here, and the National Parks Service \\\nand NASA had some fun ones!\\n\\\n';\n\nconst screenWidth = 60;\nconst screenHeight = 21;\nexport {screenWidth, screenHeight};\n\n// left and top from [0,0] of screen\nconst tvLeft = contentLeft + 6;;\nconst tvTop = contentTop + 4;\nconst tvWidth = 90;\nconst tvHeight = 30;\n\n// left and top offset of screen from top-left of tv box\nconst tvScreenLeftOffset = 5;\nconst tvScreenTopOffset = 4;\n\n// left and top offset of on/off button pair from top-left of tv\nconst tvOffLeftOffset = 74;\nconst tvOnOffTopOffset = 26;\n\n// top for channel down/up button pair (same left as above)\nconst tvChannelTopOffset = 13;\nconst downToUpText = 'DOWN     ';\nconst tvChannelUpLeftOffset = tvOffLeftOffset + downToUpText.length;\n\n// top for edge mode on/off button pair (same left as above)\nconst tvEdgeModeTopOffset = 16;\n\n// left and top offset of knobs\nconst tvKnobLeftOffset = 73;\nconst tvKnobTopOfset = 5;\n\n// left and top of now showing text\nconst tvNowShowingLeft = 5;\nconst tvNowShowingTop = 26;\n\nconst offToOnText = 'OFF      ';\nconst tvOnLeftOffset = tvOffLeftOffset + offToOnText.length;\n\nexport default ({ tvOn, setTvOn, tvChannel, setTvChannel, tvEdgeModeOn, setTvEdgeModeOn, tvDimMultiplier, setTvDimMultiplier, fontSize }) => {\n  const tvNowShowingText = !tvOn ? '' : `Channel: ${CHANNELS[tvChannel].title} (link)`;\n\n  return {\n    stringRenderData: [\n      // instruction text\n      { type: 'text', data: { start: [tvLeft,contentTop], text: 'Press \"ON\" in the bottom right to watch some Unicode TV!' }},\n      { type: 'text', data: { start: [tvLeft,contentTop + 2], text: 'Press the number buttons to change the resolution.' }},\n\n      // tv box\n      { type: 'textrect', data: { start: [tvLeft,tvTop], width: tvWidth, text: tv }},\n\n      // tv off/on\n      { type: 'text', data: { start: [tvLeft + tvOffLeftOffset, tvTop + tvOnOffTopOffset], text: 'OFF', props: { className: `clickable ${tvOn ? '' : 'selected'}`, onClick: () => setTvOn(false) } }},\n      { type: 'text', data: { start: [tvLeft + tvOnLeftOffset, tvTop + tvOnOffTopOffset], text: 'ON', props: { className: `clickable ${tvOn ? 'selected' : ''}`, onClick: () => setTvOn(true) } }},\n\n      // tv channel down/up\n      { type: 'text', data: { start: [tvLeft + tvOffLeftOffset, tvTop + tvChannelTopOffset], text: 'DOWN', props: { className: 'clickable', onClick: () => setTvChannel((tvChannel - 1 + CHANNELS.length) % CHANNELS.length) } }},\n      { type: 'text', data: { start: [tvLeft + tvChannelUpLeftOffset, tvTop + tvChannelTopOffset], text: 'UP', props: { className: 'clickable', onClick: () => setTvChannel((tvChannel + 1) % CHANNELS.length) } }},\n\n      // tv edge mode off/on\n      { type: 'text', data: { start: [tvLeft + tvOffLeftOffset, tvTop + tvEdgeModeTopOffset], text: 'OFF', props: { className: `clickable ${tvEdgeModeOn ? '' : 'selected'}`, onClick: () => setTvEdgeModeOn(false) } }},\n      { type: 'text', data: { start: [tvLeft + tvOnLeftOffset, tvTop + tvEdgeModeTopOffset], text: 'ON', props: { className: `clickable ${tvEdgeModeOn ? 'selected' : ''}`, onClick: () => setTvEdgeModeOn(true) } }},\n\n      // resolution knobs\n      { type: 'text', data: { start: [tvLeft + tvKnobLeftOffset + 9, tvTop + tvKnobTopOfset + 0], text: '1', props: { className: `clickable ${tvDimMultiplier === 1 ? 'selected' : ''}`, onClick: () => setTvDimMultiplier(1) } }},\n      { type: 'text', data: { start: [tvLeft + tvKnobLeftOffset + 11, tvTop + tvKnobTopOfset + 2], text: '2', props: { className: `clickable ${tvDimMultiplier === 2 ? 'selected' : ''}`, onClick: () => setTvDimMultiplier(2) } }},\n      { type: 'text', data: { start: [tvLeft + tvKnobLeftOffset + 10, tvTop + tvKnobTopOfset + 4], text: '3', props: { className: `clickable ${tvDimMultiplier === 3 ? 'selected' : ''}`, onClick: () => setTvDimMultiplier(3) } }},\n      { type: 'text', data: { start: [tvLeft + tvKnobLeftOffset + 2, tvTop + tvKnobTopOfset + 4], text: '4', props: { className: `clickable ${tvDimMultiplier === 4 ? 'selected' : ''}`, onClick: () => setTvDimMultiplier(4) } }},\n      { type: 'text', data: { start: [tvLeft + tvKnobLeftOffset + 1, tvTop + tvKnobTopOfset + 2], text: '5', props: { className: `clickable ${tvDimMultiplier === 5 ? 'selected' : ''}`, onClick: () => setTvDimMultiplier(5) } }},\n      { type: 'text', data: { start: [tvLeft + tvKnobLeftOffset + 3, tvTop + tvKnobTopOfset + 0], text: '6', props: { className: `clickable ${tvDimMultiplier === 6 ? 'selected' : ''}`, onClick: () => setTvDimMultiplier(6) } }},\n\n      // now showing text\n      tvOn && { type: 'text', data: { start: [tvLeft + tvNowShowingLeft, tvTop + tvNowShowingTop], text: tvNowShowingText }},\n      tvOn && { type: 'text', data: { start: [tvLeft + tvNowShowingLeft + tvNowShowingText.length - 5, tvTop + tvNowShowingTop], text: 'link', props: { href: CHANNELS[tvChannel].url }}},\n\n      // about text\n      { type: 'text', data: { start: [tvLeft, tvTop + tvHeight + 5], maxWidth: tvWidth, text: wrapppedTvText }}\n    ],\n    stringRenderChildElementDataGenerator: (singleCharWidth, singleCharHeight, verticalCharPadding) => {\n      const left = (tvLeft + tvScreenLeftOffset) * singleCharWidth;\n      const top = (tvTop + tvScreenTopOffset) * singleCharHeight + (verticalCharPadding / 2);\n      const width = screenWidth * singleCharWidth;\n      const height = screenHeight * singleCharHeight;\n      const tvFontSize = fontSize / tvDimMultiplier;\n\n      console.log(`tv container: ${left}, ${top}, ${width}, ${top}, ${tvDimMultiplier}, ${singleCharWidth}, ${singleCharHeight}, ${verticalCharPadding}`);\n\n      return [\n        <div key=\"tv-container\" style={{left:`${left}px`, top:`${top}px`, width:`${width}px`, height:`${height}px`, position:'absolute', fontSize:`${tvFontSize}px`, lineHeight:`${tvFontSize}px`}}>\n          <TV\n            key={`tv-screen-${tvDimMultiplier}`}\n            on={tvOn}\n            edgeModeOn={tvEdgeModeOn}\n            src={CHANNELS[tvChannel].src}\n            tvWidthPx={width}\n            tvHeightPx={height}\n          />\n        </div>\n      ];\n    }\n  };\n};\n","import { contentOffsets } from '../constants';\nconst [left, top] = contentOffsets;\n\nconst introText = '\\\nIn 2014, I joined Floored, a real estate tech startup specializing in \\\nspace visualization and optimization problems, as a full-stack engineer. \\\n';\n\nconst flooredLogo = '\\\n  ..........                     \\\n..............                   \\\n  ...............                \\\n     ...............             \\\n        ..............           \\\n           ..............        \\\n              ..............     \\\n                ..............∘· \\\n                   ........·•*#- \\\n                      ..·•*####- \\\n      ·∘               ∘#######- \\\n      ∘##*∘·           •#######- \\\n      ∘#####-∘         •#######- \\\n      ∘######-·        •#####*∘. \\\n      ∘###-•......     •##*-·    \\\n      ∘*•·..........   •-∘       \\\n         ............·-∘         \\\n            ......·•*##∘         \\\n              .·•*#####∘         \\\n              ·########∘         \\\n              ·########∘         \\\n              ·########∘         \\\n      ·•.     ·######*∘.         \\\n      ∘###•∘  ·###-∘             \\\n      ∘#####*•∘-∘.               \\\n      ∘#######*                  \\\n      ∘#######-                  \\\n      ∘#######-                  \\\n      ∘#######-                  \\\n      ∘#######-                  \\\n      ∘#######-                  \\\n      ∘#####-•.                  \\\n      ∘##*•·                     \\\n      ∘-·                        \\\n';\nconst flooredLogoWidth = 33;\n\nconst transitionText = '\\\nIn 2017, Floored was acquired by CBRE, and our team became CBRE Build NYC. \\\n';\n\nconst cbreBuilderHat = '\\\n                     .·•-******-∘•-*****-·                             \\\n                ·∘-*********-********-****-·                           \\\n               ·*********∘    ·*****·  ·****-∘                         \\\n          .·∘•************-·    ·****-·  ·-****∘                       \\\n         ∘********-•∘·.•****-.    ∘****-.  ·****-·                     \\\n         ****•∘·         •****-·    ∘****-·  ·****-·                   \\\n        ∘***               ∘****-·    ∘****•   ·-***.                  \\\n       ·***∘   .··∘·         ∘-***-·    -**•     -**-                  \\\n      ∘-*************•.        ∘-***∘            ∘****•                \\\n     ∘**********---****-∘        •**-             *****•               \\\n     ***-∘·.        ∘*****•.     .***∘            ∘*****.              \\\n    •***.             ·-*****∘.   ∘***             *****•              \\\n   ·***∘                .•*****·  .***·            -*****              \\\n   -***                    ∘-***.  -**-            ·*****∘             \\\n  .***∘                      ***•  ·***∘            •*****·            \\\n ·•***∘                      -***   ****            .*******∘          \\\n *****·                      .***∘  ∘***·            -*******•.        \\\n.****   ..                    •***.  -**-      .·∘•-*****-∘*****•·     \\\n ·***-. •***••                .***-∘·∘***•∘•-**********-•. .∘******-∘. \\\n  .****-******.   -•∘·.        *****************-•∘·.          ·•****∘ \\\n   ·**********•∘·.*****•       ∘∘•--*******-∘∘·.                 .***∘ \\\n     ··∘•-*************-∘··.           ..                        ∘***∘ \\\n            .·∘•-****************-•∘·.                     ..··•*****· \\\n                   .·∘•---***************-••••••••••---***********•·   \\\n                               ..·∘•-************************--•·      \\\n                                        .···∘∘∘∘∘∘∘∘∘··..              \\\n';\nconst cbreBuilderHatWidth = 71;\n\nconst flooredLeftOffset = Math.floor((cbreBuilderHatWidth - flooredLogoWidth) / 2); // heh\n\nconst endingText = '\\\nWorking on the Floored / CBRE Build team has been an incredible experience.\\n\\\n\\n\\\n\\n\\\nSome projects I\\'ve enjoyed:\\n\\\n\\n\\\n- building 3D scene-editing tools for our amazingly talented 3D art team\\n\\\n\\n\\\n- helping build a floorplan optimization product from the first commits through the MVP (and beyond)\\n\\\n\\n\\\n- accelerating 2D graph operations in said product\\n\\\n\\n\\\n- helping build a system for visualizing 2D floorplans in 3D\\n\\\n\\n\\\n- helping implement a faceted navigation feature using Algolia\\n\\\n\\n\\\n- contributing to a database system upgrade (CouchDB 1.x --> 2.x) and writing a blog post about it: https://medium.com/cbrebuild/moving-to-couchdb-2-x-c2bc606970cb\\n\\\n\\n\\\n- spreading the word about our in-house WebGL graphics engine through documentation, tutorials, and presentations \\n\\\n\\n ';\n\nexport default () => {\n  return {\n    stringRenderData: [\n      { type: 'text', data: { start: [left,top], maxWidth: 80, text: introText }},\n      { type: 'textrect', data: { start: [left + flooredLeftOffset,2], isYRelative: true, width: flooredLogoWidth, text: flooredLogo, props: { className: 'floored-purple' } }},\n      { type: 'text', data: { start: [left,4], isYRelative: true, maxWidth: 80, text: transitionText }},\n      { type: 'textrect', data: { start: [left,3], isYRelative: true, width: cbreBuilderHatWidth, text: cbreBuilderHat, props: { className: 'cbre' } }},\n      { type: 'text', data: { start: [left,4], isYRelative: true, maxWidth: 80, text: endingText }}\n    ]\n  };\n};","import { contentOffsets, maxPagePxWidth } from '../constants';\n\nconst wrappedExplanation = `\\\nAbout this website\\n\\\n---------------------\\n\\\nThe idea for this website was to use characters as the building blocks for the page\\'s \\\ncontent -- one big string of characters that wraps at the right side of the page or after ${maxPagePxWidth}px. \\\nSome characters are wrapped in separate elements for styling and interactivity, \\\nand the \"screen\" on the TV page is its own \"character render area\", but hopefully \\\nthe site retains the spirit of the original idea.\\n\\\n\\n\\n\\n\\n\\\nWhy??\\n\\\n---------------------\\n\\\nI think ASCII/unicode art looks neat, and it was an interesting experiment!\\n\\\n\\n\\\nI also think train station-style flip boards are fun, so I wanted to try \\\nto incorporate that type of animation into the page transitions here.\\n\\\n\\n\\\nHowever, since the page is essentially a long string interrupted by some inline elements \\\nin left-right top-down order, it is horribly inaccessible to screen readers. I would love \\\nto fix this in a future version.\\n\\\n\\n\\n\\n\\n\\\n`;\n\nconst [left, top] = contentOffsets;\n\nexport default () => {\n  return {\n    stringRenderData: [\n      { type: 'text', data: { start: [left,top], maxWidth: 80, text: wrappedExplanation}}\n    ]\n  };\n};","import home from './home';\nimport projects from './projects';\nimport tv from './tv';\nimport work from './work';\nimport about from './about';\n\nexport default {\n  home,\n  projects,\n  tv,\n  work,\n  about\n};","import { navWidth, topBarHeight } from '../constants';\n\nconst email = 'ben.leveque@gmail.com';\nconst linkedin = 'linkedin';\n\nconst navTextLeft = 3;\nconst navTextTopBetween = 3;\n\nconst getNavProps = (onClick, pageName) => {\n  return { className: 'clickable', onClick: () => onClick(pageName) };\n};\n\nexport default (onNavClick) => {\n  return [\n    // top info\n    { type: 'text', data: { start: [navWidth + 2, 1], text: 'Ben(jamin) LeVeque' }},\n    { type: 'text', data: { start: [-(email.length + 3), 3], text: email }},\n    { type: 'text', data: { start: [-(linkedin.length + 3), 4], text: linkedin, props: { href: 'https://www.linkedin.com/in/benjamin-leveque-5a534361/' } }},\n\n    // left nav\n    // { type: 'text', data: { start: [navTextLeft, topBarHeight + 1], text: 'Home', props: getNavProps(onNavClick, 'home') }},\n    // { type: 'text', data: { start: [navTextLeft, navTextTopBetween], isYRelative: true, text: 'Work', props: getNavProps(onNavClick, 'work') }},\n    // { type: 'text', data: { start: [navTextLeft, navTextTopBetween], isYRelative: true, text: 'TV', props: getNavProps(onNavClick, 'tv') }},\n    // { type: 'text', data: { start: [navTextLeft, navTextTopBetween], isYRelative: true, text: 'About', props: getNavProps(onNavClick, 'about') }},\n\n    // nav\n    { type: 'text', data: { start: ['5%', topBarHeight - 1], text: 'Home', props: getNavProps(onNavClick, 'home') }},\n    { type: 'text', data: { start: ['30%', topBarHeight - 1], text: 'Work', props: getNavProps(onNavClick, 'work') }},\n    { type: 'text', data: { start: ['55%', topBarHeight - 1], text: 'TV', props: getNavProps(onNavClick, 'tv') }},\n    { type: 'text', data: { start: ['80%', topBarHeight - 1], text: 'About', props: getNavProps(onNavClick, 'about') }},\n\n    // lines\n    { type: 'line', data: { start: [navWidth + 1, topBarHeight - 2], end: ['100%', topBarHeight - 2] }},\n    { type: 'line', data: { start: [navWidth + 1, topBarHeight], end: ['100%', topBarHeight] }}\n    // { type: 'line', data: { start: [navWidth, 0], end: [navWidth, '98%'] }}\n  ];\n};","const animationHelper = ({ animationLength = 400, intervalLength = 50, onTick, onDone }) => {\n  let timeInInterval = 0;\n  let interval = setInterval(() => {\n    timeInInterval += intervalLength;\n\n    onTick(Math.min(1, timeInInterval / animationLength));\n\n    if (timeInInterval >= animationLength) {\n      clearInterval(interval);\n      onDone();\n    }\n  }, intervalLength);\n};\n\nexport default animationHelper;\n","import React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './HomePage.css';\n\nimport StringRenderArea from './StringRenderArea';\nimport pageDataGenerators from '../pageDataGenerators/index';\nimport navDataGenerator from '../pageDataGenerators/nav';\nimport animationHelper from '../animationHelper';\n\n// responsibilities:\n// - keep track of nav state\n// - gather data to pass to StringRenderArea\n\nconst SHOULD_ANIMATE = true;\nconst FONT_SIZE = 14;\n\nconst HomePage = () => {\n  const location = useLocation();\n  let pathname = location.pathname.substring(1);\n  if (!pageDataGenerators.hasOwnProperty(pathname)) pathname = 'home';\n\n  let [pageName, setPageName] = useState(pathname);\n  let [newPageData, setNewPageData] = useState(null);\n  let [interpolationParameter, setInterpolationParameter] = useState(0);\n  let [tvOn, setTvOn] = useState(false);\n  let [tvChannel, setTvChannel] = useState(0);\n  let [tvEdgeModeOn, setTvEdgeModeOn] = useState(false);\n  let [tvDimMultiplier, setTvDimMultiplier] = useState(4);\n\n  let pageSpecificState = {\n    tv: {\n      tvOn,\n      setTvOn,\n      tvChannel,\n      setTvChannel,\n      tvEdgeModeOn,\n      setTvEdgeModeOn,\n      tvDimMultiplier,\n      setTvDimMultiplier,\n      fontSize: FONT_SIZE\n    }\n  };\n\n  const switchPage = newPageName => {\n    if (!SHOULD_ANIMATE) return setPageName(newPageName);\n\n    const { stringRenderData: newStringRenderData } = pageDataGenerators[newPageName](pageSpecificState[newPageName]);\n\n    setNewPageData([ ...newStringRenderData, ...navDataGenerator(switchPage)]);\n\n    animationHelper({\n      onTick: setInterpolationParameter,\n      onDone: () => {\n        setPageName(newPageName);\n        setNewPageData(null);\n      }\n    });\n  };\n\n  const { stringRenderData, stringRenderChildElementDataGenerator } = pageDataGenerators[pageName](pageSpecificState[pageName]);\n  const navRenderData = navDataGenerator(switchPage);\n\n  return (\n    <div className=\"root\" style={{ fontSize: `${FONT_SIZE}px`, lineHeight: `${FONT_SIZE}px` }}>\n      <StringRenderArea\n        className=\"home-background\"\n        data={[...stringRenderData, ...navRenderData]}\n        childElementDataGenerator={(!newPageData && stringRenderChildElementDataGenerator)}\n        newData={newPageData}\n        interpolationParameter={interpolationParameter}\n        autoResize\n       />\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './index.css';\nimport HomePage from './components/HomePage';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}